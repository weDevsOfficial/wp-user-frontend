name: WP User Frontend E2E Tests
on:
  workflow_dispatch:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

env:
  CI: true
  BASE_URL: ${{ secrets.QA_BASE_URL }}
  ADMIN_USERNAME: ${{ secrets.QA_ADMIN_USERNAME }}
  ADMIN_PASSWORD: ${{ secrets.QA_ADMIN_PASSWORD }}
  ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
  WPUF_PRO_KEY: ${{ secrets.WPUF_PRO_KEY }}

jobs:
  test:
    timeout-minutes: 30
    runs-on: ubuntu-latest    
    
    steps:
      # Debug initial directory
      - name: Check directory
        run: |
          echo "Initial working directory: $(pwd)"
          echo "Directory contents:"
          ls -la
      
      # Setup PHP
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "7.4"

      # Debug initial directory
      - name: Check directory
        run: |
          echo "Initial working directory: $(pwd)"
          echo "Directory contents:"
          ls -la
      
      # Setup Node.js 18
      - name: Use desired version of NodeJS
        uses: actions/setup-node@v4
        with:
            node-version: 18

      # Debug initial directory
      - name: Check directory
        run: |
          echo "Initial working directory: $(pwd)"
          echo "Directory contents:"
          ls -la

    # First checkout test suite
      - name: Checkout Test Suite
        run: |
          # Clone repository
          git clone --depth 1 https://github.com/Rubaiyat-E-Mohammad/wp-user-frontend.git temp
          
          # Copy only needed files
          cp temp/tests/e2e/package.json .
          cp temp/tests/e2e/package-lock.json .
          cp temp/tests/e2e/.wp-env.json .
          cp temp/tests/e2e/playwright.config.ts .
          cp -r temp/tests/e2e/tests .
          cp -r temp/tests/e2e/pages .
          cp -r temp/tests/e2e/utils .
          
          # Cleanup
          rm -rf temp
          
          # Debug
          echo "Current directory contents:"
          ls -la

      # Install test dependencies and setup WordPress
      - name: Setup WordPress Environment
        run: |
          ls -la
          npm ci
          npx wp-env start
          sleep 5
          echo "Current directory contents:"
          ls -la

      # Debug WordPress installation
      - name: WordPress setup
        run: |
          echo "WordPress installation:"
          npx wp-env run cli -- wp core version --allow-root
          echo "\nPlugin directory:"
          npx wp-env run cli -- wp plugin list --allow-root
          echo "Current directory contents:"
          ls -la

      # Now install WPUF Lite into WordPress
      - name: Install WPUF Lite
        run: |
          git clone https://github.com/weDevsOfficial/wp-user-frontend.git .wp-env/WordPress/wp-content/plugins/wp-user-frontend
          cd .wp-env/WordPress/wp-content/plugins/wp-user-frontend
          composer install
          composer dump-autoload -o
          npm install
          grunt release --force
          grunt
          ls -la
          cd ../../../../../
          echo "Current directory contents:"
          ls -la

      # Install WPUF Pro
      - name: Install WPUF Pro
        run: |
          git clone https://${{ secrets.ACCESS_TOKEN }}@github.com/weDevsOfficial/wpuf-pro.git .wp-env/WordPress/wp-content/plugins/wpuf-pro
          cd .wp-env/WordPress/wp-content/plugins/wpuf-pro
          composer install
          composer dump-autoload -o
          npm install --legacy-peer-deps
          grunt
          ls -la
          cd ../../../../../
          echo "Current directory contents:"
          ls -la

      # # Get Playwright version
      # - name: Get installed Playwright version
      #   run: |
      #     PLAYWRIGHT_VERSION=$(npm ls @playwright/test --json | jq -r '.dependencies["@playwright/test"].version')
      #     echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION" >> "$GITHUB_ENV"
      #     echo "Current directory contents:"
      #     ls -la

      # # Cache Playwright binaries
      # - name: Cache playwright binaries
      #   id: playwright-cache
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/.cache/ms-playwright
      #     key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
      #     restore-keys: ${{ runner.os }}-playwright-

      # Install Playwright
      - name: Install Playwright browser binaries & OS dependencies
        run: |
          npx playwright install chromium --with-deps
          echo "Current directory contents:"
          ls -la

      # Run the tests
      - name: Run Playwright tests
        run: |
          npx playwright test e2eMain.spec.ts --project=chromium
          echo "Current directory contents:"
          ls -la
        continue-on-error: true

      # Archive test artifacts
      - name: Archive playwright artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          if-no-files-found: ignore
          retention-days: 3

      # Debug initial directory
      - name: Check initial directory
        run: |
          echo "Initial working directory: $(pwd)"
          echo "Directory contents:"
          ls -la

      # Publish HTML report
      - name: Publish HTML report to GH Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: playwright-report
          publish_branch: gh-pages