name: Playwright Tests
on:
  push:
    branches: [ develop, automation/wpuf-e2ev2 ]
  # pull_request:
  #   branches: [ main, master ]
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest    
    
    #Cloning WPUF-Lite + WPUF-PRO
    steps:

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "7.3"
            
      - uses: actions/checkout@v2.5.0 # v2.3.4
        with:
          ref: 'automation/wpuf-e2ev2'

     
      - uses: actions/setup-node@v2
        with:
          node-version: '14.x'
      

      - name: Clone WPUF-pro
        uses: actions/checkout@v2.5.0 # v2.3.4
        with:
          repository: weDevsOfficial/wpuf-pro
          token: ${{ secrets.ACCESS_TOKEN }}
          path: 'plugins/wpuf-pro'
          ref: 'develop'

      - name: Composer install and build (WPUF-lite)
        run: |
            composer update
            composer install
            composer dump-autoload -o
            
      - name: Npm install and build (WPUF-lite)
        run: |
            npm i
            grunt release
            

      - name: Composer install and build (WPUF-pro)
        run: |
            cd plugins/wpuf-pro
            composer config allow-plugins.composer/installers true
            composer config allow-plugins.dealerdirect/phpcodesniffer-composer-installer true
            composer update
            composer install
            composer dump-autoload -o
            
      - name: Npm install and build (WPUF-pro)
        run: |
          cd plugins/wpuf-pro
          npm i
          grunt default


      - name: Install dependencies
        run: |
          cd tests  
          npm ci
          
      - name: Install Playwright Browsers
        run: |
          cd tests 
          npx playwright install chromium


      - name: Setup WordPress 
        run: |
          cd tests 
          npm run wp-env start


      - name: Run Playwright tests
        run: |
          cd tests
            npx playwright test --project=chromium
            ls
            

        env:
          CI: false
          ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
          BASE_URL: ${{ secrets.BASE_URL}}
          NEW_POST_BLANK_FORMNAME: ${{ secrets.NEW_POST_BLANK_NAME }}
          NEW_POST_BLANKFORM_FRONTEND_POST_TITLE: ${{ secrets.NEW_POST_BLANKFORM_FRONTEND_POST_TITLE }}
          NEW_REGISTRATION_BLANK_FORMNAME: ${{ secrets.NEW_REGISTRATION_BLANK_FORMNAME }} 


      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          report_paths: "tests/api/playwright-report/results.xml"
          include_passed: true,
          # check_retries: true,
          # detailed_summary: true,

      - name: Archive playwright artifacts (screenshots, HTML snapshots)
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: tests/playwright-report
          if-no-files-found: ignore
          retention-days: 30
      
      - name: Publish HTML report to GH Pages
        if: always() # We want this to always run, even if test fail prior to this step running
        uses: peaceiris/actions-gh-pages@v3.7.3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: tests/playwright-report # This is where index.html will be output
          keep_files: true # Set this to true to make sure we don't wipe out the other content in GitHub Pages
          user_name: "github-actions[bot]" # This will be the username that gets stamped in the repo commit
          user_email: "github-actions[bot]@users.noreply.github.com" # This will be the user email that gets stamped in the repo commit

      - name: Test results
        if: always()
        run: |
          echo "url is https://$GITHUB_REPOSITORY_OWNER.github.io/${GITHUB_REPOSITORY#*/}"




      